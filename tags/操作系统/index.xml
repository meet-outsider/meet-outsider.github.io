<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>操作系统 on Outsider</title>
    <link>https://meet-outsider.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 操作系统 on Outsider</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 24 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://meet-outsider.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>操作系统</title>
      <link>https://meet-outsider.github.io/posts/os/</link>
      <pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://meet-outsider.github.io/posts/os/</guid>
      <description>中断 Interrupt CPU停下当前的工作任务，去处理其他事情，处理完后回来继续执行刚才的任务，这一过程便是中断。
外部中断（硬件中断） 可屏蔽中断：可以通过设置标志位来屏蔽的中断，如I/O中断、时钟中断等。 不可屏蔽中断：不可以通过设置标志位来屏蔽的中断，如控制台中断等。 内部中断（软中断） 陷入：用户程序中的指令，如系统调用、软中断指令等。 异常：指令执行过程中产生的问题，如除零、越界等。 系统调用：用户程序主动发出的中断请求，如fork、read等。 精度缺失 负数用补码表示的，为了性能 十进制整数转二进制使用的是「除 2 取余法」，十进制转小数使用的是「乘 2 取整法」。 计算机是以浮点数的形式存储小数的，大多数计算机都是 IEEE 754 标准定义的浮点数格式，包含三个部分：
符号位：表示数字是正数还是负数，为 0 表示正数，为 1 表示负数； 指数位：指定了小数点在数据中的位置，指数可以是负数，也可以是正数，指数位的长度越长则数值的表达范围就越大； 尾数位：小数点右侧的数字，也就是小数部分，比如二进制 1.0011 x 2^(-2)，尾数部分就是 0011，而且尾数的长度决定了这个数的精度，因此如果要表示精度更高的小数，则就要提高尾数位的长度； 用 32 位来表示的浮点数，则称为单精度浮点数，也就是我们编程语言中的 float 变量，而用 64 位来表示的浮点数，称为双精度浮点数，也就是 double 变量。 内存 内存分段 需要再分配，一个虚拟地址（段号+偏移量）对应一个物理地址， 优点：没有内部内存碎片 缺点：有外部内存碎片 内存分页 固定大小的页表， 内核态：根本指令集 用户态：内核态的部分多封装，比如异常恢复等功能 Malloc 如果用户分配的内存小于 128 KB，则通过 brk() 申请内存； 如果用户分配的内存大于 128 KB，则通过 mmap() 申请内存； Brk函数是动态分配，多次调用，不会频繁切换用户态到内核态 而mmap函数一定会切换。brk函数会造成内存碎片，所以在大于128kb时，malloc使用了mmap函数来实现。 内存回收： 申请分配内存时，如果内存足够直接分配，如果内存不足，</description>
    </item>
    
  </channel>
</rss>
