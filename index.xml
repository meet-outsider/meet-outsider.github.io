<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Outsider</title>
    <link>https://meet-outsider.github.io/</link>
    <description>Recent content on Outsider</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 24 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://meet-outsider.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CPU指令集、编译器与标准库选择</title>
      <link>https://meet-outsider.github.io/posts/compiler/</link>
      <pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://meet-outsider.github.io/posts/compiler/</guid>
      <description>在软件开发中，选择适当的 CPU 指令集架构、编译器和标准库是非常重要的决策。本文将探讨不同选项之间的差异和选择的考虑因素。
CPU 指令集架构 不同的 CPU 架构具有不同的指令集、种常见的指令集架构：
x86 指令集架构：主要用于个人计算机和服务器，具有复杂的指令集和多种工作模式，我们常用的 PC 和服务器都是基于 x86 架构的。 ARM 指令集架构：主要用于移动设备和嵌入式系统，具有精简和高效的指令集，我们常用的手机和平板电脑都是基于 ARM 架构的。 MIPS 指令集架构：主要用于嵌入式系统和网络设备，具有简洁、清晰的指令集设计， MIPS 架构的路由器和交换机很常见。 Power 指令集架构：主要用于高性能计算和服务器，具有高度并行和大规模并行处理能力， IBM 的 POWER 服务器是基于 Power 架构的。 以上指令集架构也代表着: 复杂指令集架构 (CISC) 和 精简指令集架构 (RISC)。CISC 指令集架构具有复杂的指令集和多种工作模式，而 RISC 指令集架构具有精简和高效的指令集。
x86是CISC架构，ARM是RISC架构。而MIPS和Power则是混合型的指令集架构。
这里着重对比一下 x86 和 ARM 架构：
单线程中，x86 架构的 CPU 通常具有更高的性能，因为它具有更多的寄存器和更复杂的指令集。而在多线程中，ARM 架构的 CPU 通常具有更高的性能，因为它具有更多的核心和更好的并行处理能力。
ARM 架构的 CPU 通常具有更低的功耗，因此在移动设备和嵌入式系统中具有更长的电池寿命，同时也更加节能，成本更低。
x86 架构的 CPU 通常具有更好的平台兼容性，因此在个人计算机和服务器中具有更广泛的应用，而 ARM 架构的 CPU 通常具有更好的性价比，因此在移动设备和嵌入式系统中具有更广泛的应用。
选择适当的指令集架构取决于目标平台、性能需求和平台兼容性。
编译器选择 编译器是将源代码转换为可执行文件的工具。常见的编译器包括 LLVM 和 GCC。它们具有不同的优化能力、支持的语言和特性。 编译器框架：</description>
    </item>
    
    <item>
      <title>闭包</title>
      <link>https://meet-outsider.github.io/posts/closure/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://meet-outsider.github.io/posts/closure/</guid>
      <description>特性 来自百度百科的定义
闭包就是能够读取其他函数内部变量的函数。例如在 javascript 中，只有函数内部的子函数才能读取局部变量，所以闭包可以理解成“定义在一个函数内部的函数“。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。
wiki 上的定义
在计算机科学中，闭包（英語：Closure），又稱词法闭包（Lexical Closure）或函數閉包（function closures），是在支持头等函数的编程语言中实现词法绑定的一种技术。闭包在实现上是一个结构体，它存储了一个函数（通常是其入口地址）和一个关联的环境（相当于一个符号查找表）。环境里是若干对符号和值的对应关系，它既要包括约束变量（该函数内部绑定的符号），也要包括自由变量（在函数外部定义但在函数内被引用），有些函数也可能没有自由变量。闭包跟函数最大的不同在于，当捕捉闭包的时候，它的自由变量会在捕捉时被确定，这样即便脱离了捕捉时的上下文，它也能照常运行。捕捉时对于值的处理可以是值拷贝，也可以是名称引用，这通常由语言设计者决定，也可能由用户自行指定（如 C++）。
可以看到，闭包的定义有两个要点：
闭包是一个结构体，它存储了一个函数（通常是其入口地址）和一个关联的环境（相当于一个符号查找表）。 闭包的自由变量会在捕捉时被确定，这样即便脱离了捕捉时的上下文，它也能照常运行。 这样做的好处是，闭包可以在不同的上下文中运行，而不会受到上下文的影响。
代码实现 接下来直接看一些例子 😊:
经典的计数器例子：
function counter() { let count = 0; return function () { count++; console.log(count); }; } 运行结果:
const c = counter(); c(); // 1 c(); // 2 c(); // 3 const c2 = counter(); c2(); // 1 c2(); // 2 c2(); // 3 可以看到两次调用 counter() 生成了两个不同的计数器，它们之间的状态是独立的。
步骤拆分 如果你根据上面的定义，和上面的例子，已经理解了，你很聪明 👍
如果还是不太理解或者对文章感兴趣，可以看下面的步骤拆分
这里使用 go 语言来实现上面的例子的拆分</description>
    </item>
    
    <item>
      <title>智能指针</title>
      <link>https://meet-outsider.github.io/posts/smart_pointer/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://meet-outsider.github.io/posts/smart_pointer/</guid>
      <description>Hello World! This is my blog.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://meet-outsider.github.io/projects/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://meet-outsider.github.io/projects/</guid>
      <description>github.com docman
docman-react</description>
    </item>
    
  </channel>
</rss>
